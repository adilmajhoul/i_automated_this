[
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "Playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "expect",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "Playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "sync_playwright",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "expect",
        "importPath": "playwright.sync_api",
        "description": "playwright.sync_api",
        "isExtraImport": true,
        "detail": "playwright.sync_api",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Indeed_Apply_Bot",
        "importPath": "indeed_apply_bot",
        "description": "indeed_apply_bot",
        "isExtraImport": true,
        "detail": "indeed_apply_bot",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "scrapy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scrapy",
        "description": "scrapy",
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "signals",
        "importPath": "scrapy",
        "description": "scrapy",
        "isExtraImport": true,
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "HTMLSession",
        "importPath": "requests_html",
        "description": "requests_html",
        "isExtraImport": true,
        "detail": "requests_html",
        "documentation": {}
    },
    {
        "label": "is_item",
        "importPath": "itemadapter",
        "description": "itemadapter",
        "isExtraImport": true,
        "detail": "itemadapter",
        "documentation": {}
    },
    {
        "label": "ItemAdapter",
        "importPath": "itemadapter",
        "description": "itemadapter",
        "isExtraImport": true,
        "detail": "itemadapter",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "bot",
        "description": "bot",
        "isExtraImport": true,
        "detail": "bot",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "Reaction",
        "kind": 6,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "class Reaction(Enum):\n    LIKE = \"Like\"\n    LOVE = \"Love\"\n    CARE = \"Care\"\n    HAHA = \"Haha\"\n    WOW = \"Wow\"\n    SAD = \"Sad\"\n    ANGRY = \"Angry\"\ndef react(page, post, reaction: Reaction, skip_navigation=False):\n    if not skip_navigation:",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def initialize(playwright):\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    return browser, context\ndef login(page, email=\"\", password=\"\"):\n    page.goto(\"https://www.facebook.com/\")\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").click()\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").fill(email)",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def login(page, email=\"\", password=\"\"):\n    page.goto(\"https://www.facebook.com/\")\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").click()\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").fill(email)\n    time.sleep(2)\n    page.get_by_test_id(\"royal_pass\").click()\n    time.sleep(2)\n    page.get_by_test_id(\"royal_pass\").fill(password)",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "get_groups",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def get_groups(\n    page,\n    groups_url=\"https://www.facebook.com/groups/joins/?nav_source=tab\",\n    number_of_groups=3,\n):\n    page.goto(groups_url)\n    time.sleep(5)\n    groups = page.query_selector_all(\n        \"div:nth-child(2) > div.x8gbvx8.x78zum5.x1q0g3np.x1a02dak.x1nhvcw1.x1rdy4ex.xcud41i.x4vbgl9.x139jcc6 > div > div > div.x6s0dn4.x78zum5.x1q0g3np.x1qughib > div.x1cy8zhl.x78zum5.xdt5ytf.x1iyjqo2.x1a02dak.x1sy10c2.x1pi30zi > div > div > span > span > div > a\"\n    )",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "get_last_posts",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def get_last_posts(page, group_url, number_of_posts=3):\n    page.goto(group_url)\n    time.sleep(5)\n    # posts = page.query_selector_all(\n    #     \"div.html-div > span.x4k7w5x.x1h91t0o > a.x 1i10hfl.xjbqb8w\"\n    # )\n    # return [post.href for post in posts[:number_of_posts]]\n    # Get all the selectors\n    page.keyboard.press(\"End\")\n    time.sleep(10)",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def comment(page, post, comment, additional_actions=[]):\n    # Navigate to the post page only if it wasn't loaded before\n    page.goto(post)\n    time.sleep(10)\n    page.get_by_label(\"Leave a comment\").click()\n    time.sleep(3)\n    page.get_by_role(\"paragraph\").fill(comment)\n    time.sleep(3)\n    page.keyboard.press(\"Enter\")\n    time.sleep(3)",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "react",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def react(page, post, reaction: Reaction, skip_navigation=False):\n    if not skip_navigation:\n        page.goto(post)\n        time.sleep(10)\n    page.get_by_label(\"Like\", exact=True).first.hover()\n    time.sleep(5)\n    page.get_by_label(reaction.value, exact=True).first.click(position={\"x\": 17, \"y\": 21})\n    time.sleep(3)\ndef share(page, post, skip_navigation=False):\n    if not skip_navigation:",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "share",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def share(page, post, skip_navigation=False):\n    if not skip_navigation:\n        page.goto(post)\n        time.sleep(10)\n    page.get_by_label(\"Send this to friends or post\").click()\n    time.sleep(3)\n    page.get_by_label(\"Share now\").click()\n    time.sleep(3)\ndef add_friends_who_commented(page, post, skip_navigation=False, number_of_accounts=random.randint(5, 10)):\n    if not skip_navigation:",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "add_friends_who_commented",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def add_friends_who_commented(page, post, skip_navigation=False, number_of_accounts=random.randint(5, 10)):\n    if not skip_navigation:\n        page.goto(post)\n        time.sleep(10)\n    for _ in range(number_of_accounts):\n        page.mouse.wheel(0, 1000)\n        time.sleep(10)\n    accounts = page.query_selector_all(\"div.xv55zj0.x1vvkbs.x1rg5ohu.xxymvpz > div > div > span > span > a\")\n    for account in accounts[:number_of_accounts]:\n        account.hover()",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "add_accounts_who_shared",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def add_accounts_who_shared(page, post, skip_navigation=False, number_of_accounts=10):\n    if not skip_navigation:\n        page.goto(post)\n        time.sleep(10)\n    page.get_by_role(\"button\", name=\"shares\").click()\n    time.sleep(5)\n    for _ in range(number_of_accounts):\n        page.mouse.wheel(0, 200)\n        time.sleep(10)\n    accounts = page.query_selector_all(\"div.xu06os2.x1ok221b > span > h3 > span > a > strong > span\")",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "facebook.automation.bot",
        "description": "facebook.automation.bot",
        "peekOfCode": "def main(playwright, email=\"\", password=\"\"):\n    # page.get_by_label(\"Wow\").click(position={\"x\":16,\"y\":22})\n    # page.get_by_label(\"Sad\").click(position={\"x\":19,\"y\":20})\n    # page.get_by_label(\"Angry\").click(position={\"x\":17,\"y\":21})\n    # page.get_by_label(\"Leave a comment\").click()\n    # page.get_by_label(\"Comment as Adil Ahmed\").fill(\"wtf hhhhh\")\n    browser, context = initialize(playwright)\n    page = context.new_page()\n    page.set_default_timeout(60000)\n    login(page, email, password)",
        "detail": "facebook.automation.bot",
        "documentation": {}
    },
    {
        "label": "Reaction",
        "kind": 6,
        "importPath": "facebook.automation.bot_",
        "description": "facebook.automation.bot_",
        "peekOfCode": "class Reaction(Enum):\n    LIKE = \"Like\"\n    LOVE = \"Love\"\n    CARE = \"Care\"\n    HAHA = \"Haha\"\n    WOW = \"Wow\"\n    SAD = \"Sad\"\n    ANGRY = \"Angry\"\nclass FacebookBot:\n    def __init__(self, config):",
        "detail": "facebook.automation.bot_",
        "documentation": {}
    },
    {
        "label": "FacebookBot",
        "kind": 6,
        "importPath": "facebook.automation.bot_",
        "description": "facebook.automation.bot_",
        "peekOfCode": "class FacebookBot:\n    def __init__(self, config):\n        self.email = config[\"email\"]\n        self.password = config[\"password\"]\n        self.number_of_accounts_to_add = config[\"number_of_accounts_to_add\"]\n        self.number_of_posts_to_scrape = config[\"number_of_posts_to_scrape\"]\n    def initialize(self, playwright):\n        self.browser = playwright.chromium.launch(headless=False)\n        self.context = self.browser.new_context()\n        self.page = self.context.new_page()",
        "detail": "facebook.automation.bot_",
        "documentation": {}
    },
    {
        "label": "run_bot",
        "kind": 2,
        "importPath": "facebook.automation.bot_",
        "description": "facebook.automation.bot_",
        "peekOfCode": "def run_bot(config):\n    bot = FacebookBot(config)\n    bot.run()\nif __name__ == \"__main__\":\n    with open(\"config.json\", \"r\") as file:\n        configs = json.load(file)[\"bots\"]\n    for config in configs:\n        run_bot(config)",
        "detail": "facebook.automation.bot_",
        "documentation": {}
    },
    {
        "label": "Indeed_Apply_Bot",
        "kind": 6,
        "importPath": "indeed_apply_gui_bot.indeed_apply_bot",
        "description": "indeed_apply_gui_bot.indeed_apply_bot",
        "peekOfCode": "class Indeed_Apply_Bot:\n    def __init__(self, jobs_amount):\n        self.adress_bar = (181, 96)\n        self.choose_resume = (383, 489)\n        self.continue_button = (594, 546)\n        self.jobs_amount = jobs_amount\n    def switch_to_tab(self, tab_number):\n        pg.hotkey(\"alt\", str(tab_number))\n    def run(self):\n        pg.click(self.adress_bar)",
        "detail": "indeed_apply_gui_bot.indeed_apply_bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "indeed_apply_gui_bot.main",
        "description": "indeed_apply_gui_bot.main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Automate TikTok and Instagram tasks using PyAutoGUI.\")\n    parser.add_argument(\"--jobs\", type=int, required=True, help=\"number of jobs to apply to\")\n    args = parser.parse_args()\n    bot = Indeed_Apply_Bot(args.jobs)\n    bot.run()\nif __name__ == \"__main__\":\n    main()",
        "detail": "indeed_apply_gui_bot.main",
        "documentation": {}
    },
    {
        "label": "load_users",
        "kind": 2,
        "importPath": "theworldwatch.automation.theworldwatch",
        "description": "theworldwatch.automation.theworldwatch",
        "peekOfCode": "def load_users():\n    with open(\"users.csv\", \"r\") as file:\n        reader = csv.DictReader(file)\n        return list(reader)\ndef login(page):\n    page.goto(\"https://theworldwatch.com/\")\n    page.locator(\"#login\").click()\n    time.sleep(2)\n    page.get_by_placeholder(\"please enter login here\").click()\n    time.sleep(2)",
        "detail": "theworldwatch.automation.theworldwatch",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "theworldwatch.automation.theworldwatch",
        "description": "theworldwatch.automation.theworldwatch",
        "peekOfCode": "def login(page):\n    page.goto(\"https://theworldwatch.com/\")\n    page.locator(\"#login\").click()\n    time.sleep(2)\n    page.get_by_placeholder(\"please enter login here\").click()\n    time.sleep(2)\n    page.get_by_placeholder(\"please enter login here\").fill(\"__user__\")\n    time.sleep(2)\n    page.get_by_label(\"Password\").click()\n    time.sleep(2)",
        "detail": "theworldwatch.automation.theworldwatch",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "theworldwatch.automation.theworldwatch",
        "description": "theworldwatch.automation.theworldwatch",
        "peekOfCode": "def message(page, user):\n    page.goto(user[\"profile_link\"])\n    page.get_by_role(\"link\", name=\"Send Message...\").click()\n    time.sleep(2)\n    page.locator(\"#send_message_message\").nth(1).click()\n    time.sleep(2)\n    page.locator(\"#send_message_message\").nth(1).fill(f\"hi {user['username']} how are you bro ? \")\n    time.sleep(2)\n    page.get_by_role(\"img\", name=\":heart:\").click()\n    time.sleep(2)",
        "detail": "theworldwatch.automation.theworldwatch",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "theworldwatch.automation.theworldwatch",
        "description": "theworldwatch.automation.theworldwatch",
        "peekOfCode": "def run(playwright):\n    users = load_users()\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    login(page)\n    for user in users:\n        message(page, user)\n        time.sleep(5)\n    context.close()",
        "detail": "theworldwatch.automation.theworldwatch",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "theworldwatch.automation.theworldwatch",
        "description": "theworldwatch.automation.theworldwatch",
        "peekOfCode": "users = [\n    {\n        \"username\": \"Superb Nipple Man\",\n        \"video_title\": \" You could Never Predict How this Guy is About to Die..(Slow Motion Added) \",\n        \"profile_link\": \"https://theworldwatch.com/members/1324276/\",\n        \"video_url\": \"https://theworldwatch.com/videos/1619618/you-could-never-predict-how-this-guy-is-about-to-die-slow-motion-added/\",\n    },\n    {\n        \"username\": \"LordTorquemada\",\n        \"video_title\": \" You could Never Predict How this Guy is About to Die..(Slow Motion Added) \",",
        "detail": "theworldwatch.automation.theworldwatch",
        "documentation": {}
    },
    {
        "label": "UsersSpider",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.spiders.UsersSpider",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.spiders.UsersSpider",
        "peekOfCode": "class UsersSpider(scrapy.Spider):\n    base_url = \"https://theworldwatch.com\"\n    name = \"usersspider\"\n    start_urls = [\n        \"https://theworldwatch.com/latest-updates/1/\",\n    ]\n    # Custom settings for this spider\n    custom_settings = {\n        \"DOWNLOAD_DELAY\": 4,  # Delay of 2 seconds between requests\n        \"CONCURRENT_REQUESTS_PER_DOMAIN\": 1,  # Limit concurrent requests per domain",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.spiders.UsersSpider",
        "documentation": {}
    },
    {
        "label": "ScrapyTheworldwatchItem",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.items",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.items",
        "peekOfCode": "class ScrapyTheworldwatchItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    pass",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.items",
        "documentation": {}
    },
    {
        "label": "ScrapyTheworldwatchSpiderMiddleware",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "peekOfCode": "class ScrapyTheworldwatchSpiderMiddleware:\n    # Not all methods need to be defined. If a method is not defined,\n    # scrapy acts as if the spider middleware does not modify the\n    # passed objects.\n    @classmethod\n    def from_crawler(cls, crawler):\n        # This method is used by Scrapy to create your spiders.\n        s = cls()\n        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)\n        return s",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "documentation": {}
    },
    {
        "label": "ScrapyTheworldwatchDownloaderMiddleware",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "peekOfCode": "class ScrapyTheworldwatchDownloaderMiddleware:\n    # Not all methods need to be defined. If a method is not defined,\n    # scrapy acts as if the downloader middleware does not modify the\n    # passed objects.\n    @classmethod\n    def from_crawler(cls, crawler):\n        # This method is used by Scrapy to create your spiders.\n        s = cls()\n        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)\n        return s",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.middlewares",
        "documentation": {}
    },
    {
        "label": "LastVideo",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "peekOfCode": "class LastVideo(Base):\n    __tablename__ = \"last_video\"\n    id = Column(Integer, primary_key=True)\n    url = Column(String, unique=True)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String, unique=True)\n    profile_url = Column(String)\n    last_active = Column(DateTime)",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String, unique=True)\n    profile_url = Column(String)\n    last_active = Column(DateTime)",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "peekOfCode": "Base = declarative_base()\nclass LastVideo(Base):\n    __tablename__ = \"last_video\"\n    id = Column(Integer, primary_key=True)\n    url = Column(String, unique=True)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String, unique=True)\n    profile_url = Column(String)",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.models",
        "documentation": {}
    },
    {
        "label": "UsersPipeline",
        "kind": 6,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.pipelines",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.pipelines",
        "peekOfCode": "class UsersPipeline(object):\n    def __init__(self):\n        self.csvwriter = None\n    def open_spider(self, spider):\n        self.csvfile = open(\"users.csv\", \"w\", newline=\"\")\n        self.csvwriter = csv.DictWriter(\n            self.csvfile,\n            fieldnames=[\"username\", \"video_title\", \"profile_link\", \"video_url\"],\n        )\n        self.csvwriter.writeheader()",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.pipelines",
        "documentation": {}
    },
    {
        "label": "BOT_NAME",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "BOT_NAME = \"scrapy_theworldwatch\"\nSPIDER_MODULES = [\"scrapy_theworldwatch.spiders\"]\nNEWSPIDER_MODULE = \"scrapy_theworldwatch.spiders\"\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = \"scrapy_theworldwatch (+http://www.yourdomain.com)\"\n# Obey robots.txt rules\nROBOTSTXT_OBEY = True\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "SPIDER_MODULES",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "SPIDER_MODULES = [\"scrapy_theworldwatch.spiders\"]\nNEWSPIDER_MODULE = \"scrapy_theworldwatch.spiders\"\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = \"scrapy_theworldwatch (+http://www.yourdomain.com)\"\n# Obey robots.txt rules\nROBOTSTXT_OBEY = True\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "NEWSPIDER_MODULE",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "NEWSPIDER_MODULE = \"scrapy_theworldwatch.spiders\"\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = \"scrapy_theworldwatch (+http://www.yourdomain.com)\"\n# Obey robots.txt rules\nROBOTSTXT_OBEY = True\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#USER_AGENT",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#USER_AGENT = \"scrapy_theworldwatch (+http://www.yourdomain.com)\"\n# Obey robots.txt rules\nROBOTSTXT_OBEY = True\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\n#DOWNLOAD_DELAY = 3\n# The download delay setting will honor only one of:",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "ROBOTSTXT_OBEY",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "ROBOTSTXT_OBEY = True\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\n#DOWNLOAD_DELAY = 3\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS = 32\n# Configure a delay for requests for the same website (default: 0)\n# See https://docs.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\n#DOWNLOAD_DELAY = 3\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#DOWNLOAD_DELAY",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#DOWNLOAD_DELAY = 3\n# The download delay setting will honor only one of:\n#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS_PER_DOMAIN",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS_PER_DOMAIN = 16\n#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n#    \"Accept-Language\": \"en\",",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#CONCURRENT_REQUESTS_PER_IP",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#CONCURRENT_REQUESTS_PER_IP = 16\n# Disable cookies (enabled by default)\n#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n#    \"Accept-Language\": \"en\",\n#}",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#COOKIES_ENABLED",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#COOKIES_ENABLED = False\n# Disable Telnet Console (enabled by default)\n#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n#    \"Accept-Language\": \"en\",\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#TELNETCONSOLE_ENABLED",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#TELNETCONSOLE_ENABLED = False\n# Override the default request headers:\n#DEFAULT_REQUEST_HEADERS = {\n#    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n#    \"Accept-Language\": \"en\",\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html\n#SPIDER_MIDDLEWARES = {\n#    \"scrapy_theworldwatch.middlewares.ScrapyTheworldwatchSpiderMiddleware\": 543,",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#DEFAULT_REQUEST_HEADERS",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#DEFAULT_REQUEST_HEADERS = {\n#    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n#    \"Accept-Language\": \"en\",\n#}\n# Enable or disable spider middlewares\n# See https://docs.scrapy.org/en/latest/topics/spider-middleware.html\n#SPIDER_MIDDLEWARES = {\n#    \"scrapy_theworldwatch.middlewares.ScrapyTheworldwatchSpiderMiddleware\": 543,\n#}\n# Enable or disable downloader middlewares",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#SPIDER_MIDDLEWARES",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#SPIDER_MIDDLEWARES = {\n#    \"scrapy_theworldwatch.middlewares.ScrapyTheworldwatchSpiderMiddleware\": 543,\n#}\n# Enable or disable downloader middlewares\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html\n#DOWNLOADER_MIDDLEWARES = {\n#    \"scrapy_theworldwatch.middlewares.ScrapyTheworldwatchDownloaderMiddleware\": 543,\n#}\n# Enable or disable extensions\n# See https://docs.scrapy.org/en/latest/topics/extensions.html",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#DOWNLOADER_MIDDLEWARES",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#DOWNLOADER_MIDDLEWARES = {\n#    \"scrapy_theworldwatch.middlewares.ScrapyTheworldwatchDownloaderMiddleware\": 543,\n#}\n# Enable or disable extensions\n# See https://docs.scrapy.org/en/latest/topics/extensions.html\n#EXTENSIONS = {\n#    \"scrapy.extensions.telnet.TelnetConsole\": None,\n#}\n# Configure item pipelines\n# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#EXTENSIONS",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#EXTENSIONS = {\n#    \"scrapy.extensions.telnet.TelnetConsole\": None,\n#}\n# Configure item pipelines\n# See https://docs.scrapy.org/en/latest/topics/item-pipeline.html\n#ITEM_PIPELINES = {\n#    \"scrapy_theworldwatch.pipelines.ScrapyTheworldwatchPipeline\": 300,\n#}\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/autothrottle.html",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#ITEM_PIPELINES",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#ITEM_PIPELINES = {\n#    \"scrapy_theworldwatch.pipelines.ScrapyTheworldwatchPipeline\": 300,\n#}\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/autothrottle.html\n#AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_ENABLED",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_START_DELAY",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_MAX_DELAY",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_TARGET_CONCURRENCY",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = \"httpcache\"\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#AUTOTHROTTLE_DEBUG",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#AUTOTHROTTLE_DEBUG = False\n# Enable and configure HTTP caching (disabled by default)\n# See https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = \"httpcache\"\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_ENABLED",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#HTTPCACHE_ENABLED = True\n#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = \"httpcache\"\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_EXPIRATION_SECS",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#HTTPCACHE_EXPIRATION_SECS = 0\n#HTTPCACHE_DIR = \"httpcache\"\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_DIR",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#HTTPCACHE_DIR = \"httpcache\"\n#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_IGNORE_HTTP_CODES",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#HTTPCACHE_IGNORE_HTTP_CODES = []\n#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "#HTTPCACHE_STORAGE",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "#HTTPCACHE_STORAGE = \"scrapy.extensions.httpcache.FilesystemCacheStorage\"\n# Set settings whose default value is deprecated to a future-proof value\nREQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "REQUEST_FINGERPRINTER_IMPLEMENTATION",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "REQUEST_FINGERPRINTER_IMPLEMENTATION = \"2.7\"\nTWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "TWISTED_REACTOR",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "TWISTED_REACTOR = \"twisted.internet.asyncioreactor.AsyncioSelectorReactor\"\nFEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "FEED_EXPORT_ENCODING",
        "kind": 5,
        "importPath": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "description": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "peekOfCode": "FEED_EXPORT_ENCODING = \"utf-8\"",
        "detail": "theworldwatch.scrapy_theworldwatch.scrapy_theworldwatch.settings",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "tiktok_to_ig_pyautogui.bot",
        "description": "tiktok_to_ig_pyautogui.bot",
        "peekOfCode": "class Bot:\n    def __init__(self):\n        self.adress_bar = (334, 97)\n        self.snaptik_url_field = (592, 425)\n        self.snaptik_first_download = (991, 422)\n        self.snaptik_second_download = (1101, 233)\n        self.snaptik_home_logo = (147, 141)\n        self.browser_path = \"/usr/bin/google-chrome-stable\"\n        self.snaptik_url = \"https://snaptik.app/en1\"\n        self.bsuit = {",
        "detail": "tiktok_to_ig_pyautogui.bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tiktok_to_ig_pyautogui.main",
        "description": "tiktok_to_ig_pyautogui.main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Automate TikTok and Instagram tasks using PyAutoGUI.\")\n    parser.add_argument(\"--urls\", type=str, nargs=\"+\", required=True, help=\"A list of URLs.\")\n    args = parser.parse_args()\n    bot = Bot()\n    bot.run(args.urls)\nif __name__ == \"__main__\":\n    main()",
        "detail": "tiktok_to_ig_pyautogui.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.jp",
        "description": "venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "venv.bin.jp",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"https://www.facebook.com/\")\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").click()\n    time.sleep(2)\n    page.get_by_test_id(\"royal_email\").fill(\"__user__\")\n    time.sleep(2)",
        "detail": "main",
        "documentation": {}
    }
]